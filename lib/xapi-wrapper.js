// Generated by CoffeeScript 1.7.1
(function() {
  var Connector, Emitter, Wrapper;

  Connector = require('xapi-connector');

  Emitter = require('events').EventEmitter;

  Wrapper = (function() {
    function Wrapper(server_url, conn_port, stream_port, username, password) {
      this.server_url = server_url;
      this.conn_port = conn_port;
      this.stream_port = stream_port;
      this.username = username;
      this.password = password;
      this.conn_status = 0;
      this.stream_status = 0;
      this._req_id = 0;
      this._stream_session_id = null;
      this._requests = {};
      this._emitter = new Emitter();
      this._streamEmitter = new Emitter();
      this._connector = new Connector(this.server_url, this.conn_port, this.stream_port, this.username, this.password);
      this._connector.on('open', (function(_this) {
        return function() {
          _this.conn_status = 1;
          return _this._emitter.emit('open');
        };
      })(this));
      this._connector.on('close', (function(_this) {
        return function() {
          _this.conn_status = 2;
          return _this._emitter.emit('close');
        };
      })(this));
      this._connector.on('error', (function(_this) {
        return function() {
          _this.conn_status = 3;
          return _this._emitter.emit('error');
        };
      })(this));
      this._connector.on('message', (function(_this) {
        return function(msg) {
          var e, req, req_id, res;
          console.log("Received a msg " + msg);
          try {
            res = JSON.parse(msg);
            if (res.status === true) {
              req_id = res.custommTag;
              req = _this._requests[req_id];
              if (req.customTag != null) {
                res.customTag = req.customTag;
              } else {
                delete res.customTag;
              }
              _this._emitter.emit(req_id, null, req, res);
              _this._emitter.emit(req.command, null, req, res);
              return _this._emitter.emit('_message', JSON.stringify(res));
            } else {
              return _this._emitter.emit('apiError', req, res);
            }
          } catch (_error) {
            e = _error;
            return console.log(e);
          }
        };
      })(this));
      this.on('login', function(err, req, res) {
        return this._stream_session_id = res.streamSessionId;
      });
    }

    Wrapper.prototype.on = function(event, callback) {
      return this._emitter.on(event, callback);
    };

    Wrapper.prototype._send = function(command, args, custom_tag, callback) {
      var req, req_id;
      req_id = this._req_id += 1;
      if (callback != null) {
        this._emitter.on(req_id, callback);
      }
      this._requests.req_id = {
        command: command,
        "arguments": args != null ? args : void 0,
        customTag: custom_tag != null ? custom_tag : void 0
      };
      req = this._connector.buildCommand(command, args, req_id);
      console.log("Sending message " + req);
      return this._connector.send(req);
    };

    Wrapper.prototype.login = function(custom_tag, callback) {
      return this._send('login', {
        userId: this.username,
        password: this.password
      }, custom_tag);
    };

    Wrapper.prototype.logout = function(custom_tag, callback) {
      return this._send('logout', null, custom_tag);
    };

    Wrapper.prototype.ping = function(custom_tag, callback) {
      return this._send('ping', null, custom_tag);
    };

    Wrapper.prototype.connect = function() {
      return this._connector.connect();
    };

    Wrapper.prototype.disconnect = function() {
      return this._connector.disconnect();
    };

    return Wrapper;

  })();

  module.exports = Wrapper;

}).call(this);
