// Generated by CoffeeScript 1.7.1
(function() {
  var Connector, Emitter, Wrapper, print;

  Connector = require('xapi-connector');

  Emitter = require('events').EventEmitter;

  print = function(msg) {
    return console.log(msg);
  };

  Wrapper = (function() {
    function Wrapper(server_url, conn_port, stream_port, username, password) {
      this.server_url = server_url;
      this.conn_port = conn_port;
      this.stream_port = stream_port;
      this.username = username;
      this.password = password;
      this.conn_status = 0;
      this.stream_status = 0;
      this._req_id = 0;
      this._stream_session_id = null;
      this._requests = {};
      this._emitter = new Emitter();
      this._streamEmitter = new Emitter();
      this._connector = new Connector(this.server_url, this.conn_port, this.stream_port, this.username, this.password);
      this._connector.on('open', (function(_this) {
        return function() {
          _this.conn_status = 1;
          return _this._emitter.emit('open');
        };
      })(this));
      this._connector.on('close', (function(_this) {
        return function() {
          _this.conn_status = 2;
          print("CONNECTION CLOSED");
          return _this._emitter.emit('close');
        };
      })(this));
      this._connector.on('error', (function(_this) {
        return function(err) {
          _this.conn_status = 3;
          print("CONNECTION ERROR");
          return _this._emitter.emit('error', err);
        };
      })(this));
      this._connector.on('message', (function(_this) {
        return function(msg) {
          var e, req, req_id, res;
          try {
            res = JSON.parse(msg);
            req_id = parseInt(res.customTag);
            req = _this._requests[req_id];
            if (req.customTag != null) {
              res.customTag = req.customTag;
            } else {
              delete res.customTag;
            }
            if (res.status === true) {
              _this._emitter.emit('_message', req, res, _this);
              return _this._emitter.emit(req.command, req, res, _this);
            } else {
              return _this._emitter.emit('apiError', req, res);
            }
          } catch (_error) {
            e = _error;
            return console.log(e);
          }
        };
      })(this));
      this._connector.onStream('message', (function(_this) {
        return function(msg) {
          var e;
          try {
            msg = JSON.parse(msg);
            _this._streamEmitter.emit('_message', msg, _this);
            return _this._streamEmitter.emit(msg.command, msg, _this);
          } catch (_error) {
            e = _error;
            return console.log(e);
          }
        };
      })(this));
      this._connector.onStream('open', (function(_this) {
        return function() {
          _this.stream_status = 1;
          return _this._streamEmitter.emit('open');
        };
      })(this));
      this._connector.onStream('close', (function(_this) {
        return function() {
          _this.stream_status = 2;
          print("STREAM CLOSED");
          return _this._streamEmitter.emit('close');
        };
      })(this));
      this._connector.onStream('error', (function(_this) {
        return function(err) {
          _this.stream_status = 3;
          print("STREAM ERROR");
          return _this._streamEmitter.emit('error', err);
        };
      })(this));
      this.on('login', (function(_this) {
        return function(req, res) {
          return _this._stream_session_id = res.streamSessionId;
        };
      })(this));
    }

    Wrapper.prototype.on = function(event, callback) {
      this._emitter.on(event, callback);
    };

    Wrapper.prototype.onStream = function(event, callback) {
      this._streamEmitter.on(event, callback);
    };

    Wrapper.prototype.use = function(plugin) {
      plugin(this);
    };

    Wrapper.prototype.getQue = function() {
      return this._connector.getQue();
    };

    Wrapper.prototype.getStreamQue = function() {
      return this._connector.getStreamQue();
    };

    Wrapper.prototype._send = function(command, args, custom_tag) {
      var req, req_id;
      req_id = this._req_id += 1;
      this._requests[req_id] = {
        command: command,
        "arguments": args != null ? args : void 0,
        customTag: custom_tag != null ? custom_tag : void 0
      };
      req = this._connector.buildCommand(command, args, req_id.toString());
      this._connector.send(req);
    };

    Wrapper.prototype._sendStream = function(msg) {
      this._connector.sendStream(msg);
    };

    Wrapper.prototype.connect = function() {
      this._connector.connect();
    };

    Wrapper.prototype.disconnect = function() {
      this._connector.disconnect();
    };

    Wrapper.prototype.connectStream = function() {
      this._connector.connectStream();
    };

    Wrapper.prototype.disconnectStream = function() {
      this._connector.disconnectStream();
    };

    Wrapper.prototype.login = function(custom_tag) {
      this._send('login', {
        userId: this.username,
        password: this.password
      }, custom_tag);
    };

    Wrapper.prototype.logout = function(custom_tag) {
      this._send('logout', null, custom_tag);
    };

    Wrapper.prototype.ping = function(custom_tag) {
      this._send('ping', null, custom_tag);
    };

    Wrapper.prototype.addOrder = function(args, custom_tag) {
      this._send('addOrder', args, custom_tag);
    };

    Wrapper.prototype.closePosition = function(args, custom_tag) {
      this._send('closePosition', args, custom_tag);
    };

    Wrapper.prototype.closePositions = function(args, custom_tag) {
      this._send('closePositions', args, custom_tag);
    };

    Wrapper.prototype.deletePending = function(args, custom_tag) {
      this._send('deletePending', args, custom_tag);
    };

    Wrapper.prototype.getAccountIndicators = function(custom_tag) {
      this._send('getAccountIndicators', null, custom_tag);
    };

    Wrapper.prototype.getAccountInfo = function(custom_tag) {
      this._send('getAccountInfo', null, custom_tag);
    };

    Wrapper.prototype.getAllSymbols = function(custom_tag) {
      this._send('getAllSymbols', null, custom_tag);
    };

    Wrapper.prototype.getCalendar = function(custom_tag) {
      this._send('getCalendar', null, custom_tag);
    };

    Wrapper.prototype.getCandles = function(args, custom_tag) {
      this._send('getCandles', args, custom_tag);
    };

    Wrapper.prototype.getCashOperationsHistory = function(args, custom_tag) {
      this._send('getCashOperationsHistory', args, custom_tag);
    };

    Wrapper.prototype.getCommisionsDef = function(args, custom_tag) {
      this._send('getCommisionsDef', args, custom_tag);
    };

    Wrapper.prototype.getlbsHistory = function(args, custom_tag) {
      this._send('getlbsHistory', args, custom_tag);
    };

    Wrapper.prototype.getMarginTrade = function(args, custom_tag) {
      this._send('getMarginTrade', args, custom_tag);
    };

    Wrapper.prototype.getNews = function(args, custom_tag) {
      this._send('getNews', args, custom_tag);
    };

    Wrapper.prototype.getOrderStatus = function(args, custom_tag) {
      this._send('getOrderStatus', args, custom_tag);
    };

    Wrapper.prototype.getProfitCalculations = function(args, custom_tag) {
      this._send('getProfitCalculations', args, custom_tag);
    };

    Wrapper.prototype.getServerTime = function(args, custom_tag) {
      this._send('getServerTime', args, custom_tag);
    };

    Wrapper.prototype.getStepRules = function(custom_tag) {
      this._send('getStepRules', null, custom_tag);
    };

    Wrapper.prototype.getSymbol = function(args, custom_tag) {
      this._send('getSymbol', args, custom_tag);
    };

    Wrapper.prototype.getTickPrices = function(args, custom_tag) {
      this._send('getTickPrices', args, custom_tag);
    };

    Wrapper.prototype.getTradeRecords = function(args, custom_tag) {
      this._send('getTradeRecords', args, custom_tag);
    };

    Wrapper.prototype.getTrades = function(custom_tag) {
      this._send('getTrades', null, custom_tag);
    };

    Wrapper.prototype.getTradesHistory = function(args, custom_tag) {
      this._send('getTradesHistory', args, custom_tag);
    };

    Wrapper.prototype.getTradingHours = function(args, custom_tag) {
      this._send('getTradingHours', args, custom_tag);
    };

    Wrapper.prototype.getVersion = function(custom_tag) {
      this._send('getVersion', null, custom_tag);
    };

    Wrapper.prototype.modifyPending = function(args, custom_tag) {
      this._send('modifyPending', args, custom_tag);
    };

    Wrapper.prototype.modifyPosition = function(args, custom_tag) {
      this._send('modifyPosition', args, custom_tag);
    };

    Wrapper.prototype.subscribeAccountIndicators = function() {
      this._sendStream(this._connector.buildStreamCommand('getAccountIndicators', this._stream_session_id));
    };

    Wrapper.prototype.subscribeCandles = function(args) {
      this._sendStream(this._connector.buildStreamCommand('getCandles', this._stream_session_id, args));
    };

    Wrapper.prototype.subscribeKeepAlive = function() {
      this._sendStream(this._connector.buildStreamCommand('getKeepAlive', this._stream_session_id));
    };

    Wrapper.prototype.subscribeNews = function() {
      this._sendStream(this._connector.buildStreamCommand('getNews', this._stream_session_id));
    };

    Wrapper.prototype.subscribeOrderStatus = function() {
      this._sendStream(this._connector.buildStreamCommand('getOrderStatus', this._stream_session_id));
    };

    Wrapper.prototype.subscribeProfits = function() {
      this._sendStream(this._connector.buildStreamCommand('getProfits', this._stream_session_id));
    };

    Wrapper.prototype.subscribeTickPrices = function(args) {
      this._sendStream(this._connector.buildStreamCommand('getTickPrices', this._stream_session_id, args));
    };

    Wrapper.prototype.subscribeTrades = function() {
      this._sendStream(this._connector.buildStreamCommand('getTrades', this._stream_session_id));
    };

    Wrapper.prototype.unsubscribeAccountIndicators = function() {
      this._sendStream(this._connector.buildStreamCommand('stopAccountIndicators'));
    };

    Wrapper.prototype.unsubscribeCandles = function(args) {
      this._sendStream(this._connector.buildStreamCommand('stopCandles', args));
    };

    Wrapper.prototype.unsubscribeKeepAlive = function() {
      this._sendStream(this._connector.buildStreamCommand('stopKeepAlive'));
    };

    Wrapper.prototype.unsubscribeNews = function() {
      this._sendStream(this._connector.buildStreamCommand('stopNews'));
    };

    Wrapper.prototype.unsubscribeOrderStatus = function() {
      this._sendStream(this._connector.buildStreamCommand('stopOrderStatus'));
    };

    Wrapper.prototype.unsubscribeProfits = function() {
      this._sendStream(this._connector.buildStreamCommand('stopProfits'));
    };

    Wrapper.prototype.unsubscribeTickPrices = function(args) {
      this._sendStream(this._connector.buildStreamCommand('stopTickPrices', args));
    };

    Wrapper.prototype.unsubscribeTrades = function() {
      this._sendStream(this._connector.buildStreamCommand('stopTrades'));
    };

    return Wrapper;

  })();

  module.exports = Wrapper;

}).call(this);
